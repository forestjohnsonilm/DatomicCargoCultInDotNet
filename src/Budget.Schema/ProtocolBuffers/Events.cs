// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Events.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Budget.Data.Events {

  /// <summary>Holder for reflection information generated from Events.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class EventsReflection {

    #region Descriptor
    /// <summary>File descriptor for Events.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxFdmVudHMucHJvdG8SFXNlcXVlbnRpYWxyZWFkLmJ1ZGdldBoKRGF0YS5w",
            "cm90byLRAQoFRXZlbnQSDgoGdXNlcklkGAIgASgNEgwKBGRhdGUYAyABKAMS",
            "TwoWdXBsb2FkU3ByZWFkc2hlZXRFdmVudBgKIAEoCzItLnNlcXVlbnRpYWxy",
            "ZWFkLmJ1ZGdldC5VcGxvYWRTcHJlYWRzaGVldEV2ZW50SAASSwoUc29ydFRy",
            "YW5zYWN0aW9uRXZlbnQYCyABKAsyKy5zZXF1ZW50aWFscmVhZC5idWRnZXQu",
            "U29ydFRyYW5zYWN0aW9uRXZlbnRIAEIMCgpldmVudF90eXBlIvIBChZVcGxv",
            "YWRTcHJlYWRzaGVldEV2ZW50Ek8KBnNvdXJjZRgCIAEoDjI/LnNlcXVlbnRp",
            "YWxyZWFkLmJ1ZGdldC5VcGxvYWRTcHJlYWRzaGVldEV2ZW50LlNwcmVhZHNo",
            "ZWV0U291cmNlEhAKCGZpbGVuYW1lGAMgASgJEjMKBHJvd3MYBCADKAsyJS5z",
            "ZXF1ZW50aWFscmVhZC5idWRnZXQuU3ByZWFkc2hlZXRSb3ciQAoRU3ByZWFk",
            "c2hlZXRTb3VyY2USCwoHVU5LTk9XThAAEgoKBkJSRU1FUhABEhIKDkdOVUNB",
            "U0hfQ1VTVE9NEAIiIAoOU3ByZWFkc2hlZXRSb3cSDgoGZmllbGRzGAEgAygJ",
            "Io0BChRTb3J0VHJhbnNhY3Rpb25FdmVudBI3Cgt0cmFuc2FjdGlvbhgBIAEo",
            "CzIiLnNlcXVlbnRpYWxyZWFkLmJ1ZGdldC5UcmFuc2FjdGlvbhI8CghjYXRl",
            "Z29yeRgDIAEoCzIqLnNlcXVlbnRpYWxyZWFkLmJ1ZGdldC5UcmFuc2FjdGlv",
            "bkNhdGVnb3J5QhWqAhJCdWRnZXQuRGF0YS5FdmVudHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Budget.Data.Data.DataReflection.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Budget.Data.Events.Event), global::Budget.Data.Events.Event.Parser, new[]{ "UserId", "Date", "UploadSpreadsheetEvent", "SortTransactionEvent" }, new[]{ "EventType" }, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Budget.Data.Events.UploadSpreadsheetEvent), global::Budget.Data.Events.UploadSpreadsheetEvent.Parser, new[]{ "Source", "Filename", "Rows" }, null, new[]{ typeof(global::Budget.Data.Events.UploadSpreadsheetEvent.Types.SpreadsheetSource) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Budget.Data.Events.SpreadsheetRow), global::Budget.Data.Events.SpreadsheetRow.Parser, new[]{ "Fields" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Budget.Data.Events.SortTransactionEvent), global::Budget.Data.Events.SortTransactionEvent.Parser, new[]{ "Transaction", "Category" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Budget.Data.Events.EventsReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Event(Event other) : this() {
      userId_ = other.userId_;
      date_ = other.date_;
      switch (other.EventTypeCase) {
        case EventTypeOneofCase.UploadSpreadsheetEvent:
          UploadSpreadsheetEvent = other.UploadSpreadsheetEvent.Clone();
          break;
        case EventTypeOneofCase.SortTransactionEvent:
          SortTransactionEvent = other.SortTransactionEvent.Clone();
          break;
      }

    }

    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private uint userId_;
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 3;
    private long date_;
    public long Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "uploadSpreadsheetEvent" field.</summary>
    public const int UploadSpreadsheetEventFieldNumber = 10;
    public global::Budget.Data.Events.UploadSpreadsheetEvent UploadSpreadsheetEvent {
      get { return eventTypeCase_ == EventTypeOneofCase.UploadSpreadsheetEvent ? (global::Budget.Data.Events.UploadSpreadsheetEvent) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.UploadSpreadsheetEvent;
      }
    }

    /// <summary>Field number for the "sortTransactionEvent" field.</summary>
    public const int SortTransactionEventFieldNumber = 11;
    public global::Budget.Data.Events.SortTransactionEvent SortTransactionEvent {
      get { return eventTypeCase_ == EventTypeOneofCase.SortTransactionEvent ? (global::Budget.Data.Events.SortTransactionEvent) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.SortTransactionEvent;
      }
    }

    private object eventType_;
    /// <summary>Enum of possible cases for the "event_type" oneof.</summary>
    public enum EventTypeOneofCase {
      None = 0,
      UploadSpreadsheetEvent = 10,
      SortTransactionEvent = 11,
    }
    private EventTypeOneofCase eventTypeCase_ = EventTypeOneofCase.None;
    public EventTypeOneofCase EventTypeCase {
      get { return eventTypeCase_; }
    }

    public void ClearEventType() {
      eventTypeCase_ = EventTypeOneofCase.None;
      eventType_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Date != other.Date) return false;
      if (!object.Equals(UploadSpreadsheetEvent, other.UploadSpreadsheetEvent)) return false;
      if (!object.Equals(SortTransactionEvent, other.SortTransactionEvent)) return false;
      if (EventTypeCase != other.EventTypeCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (Date != 0L) hash ^= Date.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.UploadSpreadsheetEvent) hash ^= UploadSpreadsheetEvent.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.SortTransactionEvent) hash ^= SortTransactionEvent.GetHashCode();
      hash ^= (int) eventTypeCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserId);
      }
      if (Date != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Date);
      }
      if (eventTypeCase_ == EventTypeOneofCase.UploadSpreadsheetEvent) {
        output.WriteRawTag(82);
        output.WriteMessage(UploadSpreadsheetEvent);
      }
      if (eventTypeCase_ == EventTypeOneofCase.SortTransactionEvent) {
        output.WriteRawTag(90);
        output.WriteMessage(SortTransactionEvent);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (Date != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Date);
      }
      if (eventTypeCase_ == EventTypeOneofCase.UploadSpreadsheetEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UploadSpreadsheetEvent);
      }
      if (eventTypeCase_ == EventTypeOneofCase.SortTransactionEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SortTransactionEvent);
      }
      return size;
    }

    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.Date != 0L) {
        Date = other.Date;
      }
      switch (other.EventTypeCase) {
        case EventTypeOneofCase.UploadSpreadsheetEvent:
          UploadSpreadsheetEvent = other.UploadSpreadsheetEvent;
          break;
        case EventTypeOneofCase.SortTransactionEvent:
          SortTransactionEvent = other.SortTransactionEvent;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            UserId = input.ReadUInt32();
            break;
          }
          case 24: {
            Date = input.ReadInt64();
            break;
          }
          case 82: {
            global::Budget.Data.Events.UploadSpreadsheetEvent subBuilder = new global::Budget.Data.Events.UploadSpreadsheetEvent();
            if (eventTypeCase_ == EventTypeOneofCase.UploadSpreadsheetEvent) {
              subBuilder.MergeFrom(UploadSpreadsheetEvent);
            }
            input.ReadMessage(subBuilder);
            UploadSpreadsheetEvent = subBuilder;
            break;
          }
          case 90: {
            global::Budget.Data.Events.SortTransactionEvent subBuilder = new global::Budget.Data.Events.SortTransactionEvent();
            if (eventTypeCase_ == EventTypeOneofCase.SortTransactionEvent) {
              subBuilder.MergeFrom(SortTransactionEvent);
            }
            input.ReadMessage(subBuilder);
            SortTransactionEvent = subBuilder;
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UploadSpreadsheetEvent : pb::IMessage<UploadSpreadsheetEvent> {
    private static readonly pb::MessageParser<UploadSpreadsheetEvent> _parser = new pb::MessageParser<UploadSpreadsheetEvent>(() => new UploadSpreadsheetEvent());
    public static pb::MessageParser<UploadSpreadsheetEvent> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Budget.Data.Events.EventsReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UploadSpreadsheetEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UploadSpreadsheetEvent(UploadSpreadsheetEvent other) : this() {
      source_ = other.source_;
      filename_ = other.filename_;
      rows_ = other.rows_.Clone();
    }

    public UploadSpreadsheetEvent Clone() {
      return new UploadSpreadsheetEvent(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::Budget.Data.Events.UploadSpreadsheetEvent.Types.SpreadsheetSource source_ = global::Budget.Data.Events.UploadSpreadsheetEvent.Types.SpreadsheetSource.UNKNOWN;
    public global::Budget.Data.Events.UploadSpreadsheetEvent.Types.SpreadsheetSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 3;
    private string filename_ = "";
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Budget.Data.Events.SpreadsheetRow> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(34, global::Budget.Data.Events.SpreadsheetRow.Parser);
    private readonly pbc::RepeatedField<global::Budget.Data.Events.SpreadsheetRow> rows_ = new pbc::RepeatedField<global::Budget.Data.Events.SpreadsheetRow>();
    public pbc::RepeatedField<global::Budget.Data.Events.SpreadsheetRow> Rows {
      get { return rows_; }
    }

    public override bool Equals(object other) {
      return Equals(other as UploadSpreadsheetEvent);
    }

    public bool Equals(UploadSpreadsheetEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (Filename != other.Filename) return false;
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Source != global::Budget.Data.Events.UploadSpreadsheetEvent.Types.SpreadsheetSource.UNKNOWN) hash ^= Source.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      hash ^= rows_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Source != global::Budget.Data.Events.UploadSpreadsheetEvent.Types.SpreadsheetSource.UNKNOWN) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Source);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Filename);
      }
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Source != global::Budget.Data.Events.UploadSpreadsheetEvent.Types.SpreadsheetSource.UNKNOWN) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Source);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    public void MergeFrom(UploadSpreadsheetEvent other) {
      if (other == null) {
        return;
      }
      if (other.Source != global::Budget.Data.Events.UploadSpreadsheetEvent.Types.SpreadsheetSource.UNKNOWN) {
        Source = other.Source;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      rows_.Add(other.rows_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            source_ = (global::Budget.Data.Events.UploadSpreadsheetEvent.Types.SpreadsheetSource) input.ReadEnum();
            break;
          }
          case 26: {
            Filename = input.ReadString();
            break;
          }
          case 34: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UploadSpreadsheetEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum SpreadsheetSource {
        UNKNOWN = 0,
        BREMER = 1,
        GNUCASH_CUSTOM = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SpreadsheetRow : pb::IMessage<SpreadsheetRow> {
    private static readonly pb::MessageParser<SpreadsheetRow> _parser = new pb::MessageParser<SpreadsheetRow>(() => new SpreadsheetRow());
    public static pb::MessageParser<SpreadsheetRow> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Budget.Data.Events.EventsReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SpreadsheetRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SpreadsheetRow(SpreadsheetRow other) : this() {
      fields_ = other.fields_.Clone();
    }

    public SpreadsheetRow Clone() {
      return new SpreadsheetRow(this);
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_fields_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> fields_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Fields {
      get { return fields_; }
    }

    public override bool Equals(object other) {
      return Equals(other as SpreadsheetRow);
    }

    public bool Equals(SpreadsheetRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fields_.Equals(other.fields_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= fields_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      fields_.WriteTo(output, _repeated_fields_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += fields_.CalculateSize(_repeated_fields_codec);
      return size;
    }

    public void MergeFrom(SpreadsheetRow other) {
      if (other == null) {
        return;
      }
      fields_.Add(other.fields_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SortTransactionEvent : pb::IMessage<SortTransactionEvent> {
    private static readonly pb::MessageParser<SortTransactionEvent> _parser = new pb::MessageParser<SortTransactionEvent>(() => new SortTransactionEvent());
    public static pb::MessageParser<SortTransactionEvent> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Budget.Data.Events.EventsReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SortTransactionEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SortTransactionEvent(SortTransactionEvent other) : this() {
      Transaction = other.transaction_ != null ? other.Transaction.Clone() : null;
      Category = other.category_ != null ? other.Category.Clone() : null;
    }

    public SortTransactionEvent Clone() {
      return new SortTransactionEvent(this);
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 1;
    private global::Budget.Data.Data.Transaction transaction_;
    public global::Budget.Data.Data.Transaction Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 3;
    private global::Budget.Data.Data.TransactionCategory category_;
    public global::Budget.Data.Data.TransactionCategory Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SortTransactionEvent);
    }

    public bool Equals(SortTransactionEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transaction, other.Transaction)) return false;
      if (!object.Equals(Category, other.Category)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      if (category_ != null) hash ^= Category.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (transaction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transaction);
      }
      if (category_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Category);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      if (category_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Category);
      }
      return size;
    }

    public void MergeFrom(SortTransactionEvent other) {
      if (other == null) {
        return;
      }
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          transaction_ = new global::Budget.Data.Data.Transaction();
        }
        Transaction.MergeFrom(other.Transaction);
      }
      if (other.category_ != null) {
        if (category_ == null) {
          category_ = new global::Budget.Data.Data.TransactionCategory();
        }
        Category.MergeFrom(other.Category);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (transaction_ == null) {
              transaction_ = new global::Budget.Data.Data.Transaction();
            }
            input.ReadMessage(transaction_);
            break;
          }
          case 26: {
            if (category_ == null) {
              category_ = new global::Budget.Data.Data.TransactionCategory();
            }
            input.ReadMessage(category_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
