// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Budget.Data.Data {

  /// <summary>Holder for reflection information generated from Data.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for Data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpEYXRhLnByb3RvEhVzZXF1ZW50aWFscmVhZC5idWRnZXQi0AEKC1RyYW5z",
            "YWN0aW9uEgoKAmlkGAEgASgMEhIKCmNhdGVnb3J5SWQYAiABKA0SPAoIY2F0",
            "ZWdvcnkYAyABKAsyKi5zZXF1ZW50aWFscmVhZC5idWRnZXQuVHJhbnNhY3Rp",
            "b25DYXRlZ29yeRIOCgZ1c2VySWQYBCABKA0SDAoEZGF0ZRgFIAEoBBINCgVj",
            "ZW50cxgGIAEoERITCgtkZXNjcmlwdGlvbhgHIAEoCRIMCgRjYXJkGAggASgJ",
            "EhMKC2NoZWNrTnVtYmVyGAkgASgNIlwKE1RyYW5zYWN0aW9uQ2F0ZWdvcnkS",
            "CgoCaWQYASABKA0SKwoFY29sb3IYAiABKAsyHC5zZXF1ZW50aWFscmVhZC5i",
            "dWRnZXQuQ29sb3ISDAoEbmFtZRgDIAEoCSIoCgVDb2xvchIJCgFoGAEgASgC",
            "EgkKAXMYAiABKAISCQoBdhgDIAEoAiJiCg9DYXRlZ29yeUtleXdvcmQSDwoH",
            "a2V5d29yZBgBIAEoCRI+CgtzdWdnZXN0aW9ucxgCIAMoCzIpLnNlcXVlbnRp",
            "YWxyZWFkLmJ1ZGdldC5DYXRlZ29yeVN1Z2dlc3Rpb24iPAoSQ2F0ZWdvcnlT",
            "dWdnZXN0aW9uEhIKCmNhdGVnb3J5SWQYASABKA0SEgoKcG9wdWxhcml0eRgC",
            "IAEoDUITqgIQQnVkZ2V0LkRhdGEuRGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Budget.Data.Data.Transaction), global::Budget.Data.Data.Transaction.Parser, new[]{ "Id", "CategoryId", "Category", "UserId", "Date", "Cents", "Description", "Card", "CheckNumber" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Budget.Data.Data.TransactionCategory), global::Budget.Data.Data.TransactionCategory.Parser, new[]{ "Id", "Color", "Name" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Budget.Data.Data.Color), global::Budget.Data.Data.Color.Parser, new[]{ "H", "S", "V" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Budget.Data.Data.CategoryKeyword), global::Budget.Data.Data.CategoryKeyword.Parser, new[]{ "Keyword", "Suggestions" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Budget.Data.Data.CategorySuggestion), global::Budget.Data.Data.CategorySuggestion.Parser, new[]{ "CategoryId", "Popularity" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Budget.Data.Data.DataReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Transaction(Transaction other) : this() {
      id_ = other.id_;
      categoryId_ = other.categoryId_;
      Category = other.category_ != null ? other.Category.Clone() : null;
      userId_ = other.userId_;
      date_ = other.date_;
      cents_ = other.cents_;
      description_ = other.description_;
      card_ = other.card_;
      checkNumber_ = other.checkNumber_;
    }

    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "categoryId" field.</summary>
    public const int CategoryIdFieldNumber = 2;
    private uint categoryId_;
    public uint CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 3;
    private global::Budget.Data.Data.TransactionCategory category_;
    public global::Budget.Data.Data.TransactionCategory Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private uint userId_;
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 5;
    private ulong date_;
    public ulong Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "cents" field.</summary>
    public const int CentsFieldNumber = 6;
    private int cents_;
    public int Cents {
      get { return cents_; }
      set {
        cents_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 7;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 8;
    private string card_ = "";
    public string Card {
      get { return card_; }
      set {
        card_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "checkNumber" field.</summary>
    public const int CheckNumberFieldNumber = 9;
    private uint checkNumber_;
    public uint CheckNumber {
      get { return checkNumber_; }
      set {
        checkNumber_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CategoryId != other.CategoryId) return false;
      if (!object.Equals(Category, other.Category)) return false;
      if (UserId != other.UserId) return false;
      if (Date != other.Date) return false;
      if (Cents != other.Cents) return false;
      if (Description != other.Description) return false;
      if (Card != other.Card) return false;
      if (CheckNumber != other.CheckNumber) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (CategoryId != 0) hash ^= CategoryId.GetHashCode();
      if (category_ != null) hash ^= Category.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (Date != 0UL) hash ^= Date.GetHashCode();
      if (Cents != 0) hash ^= Cents.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Card.Length != 0) hash ^= Card.GetHashCode();
      if (CheckNumber != 0) hash ^= CheckNumber.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (CategoryId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CategoryId);
      }
      if (category_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Category);
      }
      if (UserId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UserId);
      }
      if (Date != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Date);
      }
      if (Cents != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(Cents);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      if (Card.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Card);
      }
      if (CheckNumber != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(CheckNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (CategoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CategoryId);
      }
      if (category_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Category);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (Date != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Date);
      }
      if (Cents != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Cents);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Card.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Card);
      }
      if (CheckNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CheckNumber);
      }
      return size;
    }

    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.CategoryId != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.category_ != null) {
        if (category_ == null) {
          category_ = new global::Budget.Data.Data.TransactionCategory();
        }
        Category.MergeFrom(other.Category);
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.Date != 0UL) {
        Date = other.Date;
      }
      if (other.Cents != 0) {
        Cents = other.Cents;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Card.Length != 0) {
        Card = other.Card;
      }
      if (other.CheckNumber != 0) {
        CheckNumber = other.CheckNumber;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 16: {
            CategoryId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (category_ == null) {
              category_ = new global::Budget.Data.Data.TransactionCategory();
            }
            input.ReadMessage(category_);
            break;
          }
          case 32: {
            UserId = input.ReadUInt32();
            break;
          }
          case 40: {
            Date = input.ReadUInt64();
            break;
          }
          case 48: {
            Cents = input.ReadSInt32();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
          case 66: {
            Card = input.ReadString();
            break;
          }
          case 72: {
            CheckNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TransactionCategory : pb::IMessage<TransactionCategory> {
    private static readonly pb::MessageParser<TransactionCategory> _parser = new pb::MessageParser<TransactionCategory>(() => new TransactionCategory());
    public static pb::MessageParser<TransactionCategory> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Budget.Data.Data.DataReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TransactionCategory() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TransactionCategory(TransactionCategory other) : this() {
      id_ = other.id_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      name_ = other.name_;
    }

    public TransactionCategory Clone() {
      return new TransactionCategory(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private global::Budget.Data.Data.Color color_;
    public global::Budget.Data.Data.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TransactionCategory);
    }

    public bool Equals(TransactionCategory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (Name != other.Name) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (color_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(TransactionCategory other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Budget.Data.Data.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            if (color_ == null) {
              color_ = new global::Budget.Data.Data.Color();
            }
            input.ReadMessage(color_);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Color : pb::IMessage<Color> {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Budget.Data.Data.DataReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Color(Color other) : this() {
      h_ = other.h_;
      s_ = other.s_;
      v_ = other.v_;
    }

    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 1;
    private float h_;
    public float H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 2;
    private float s_;
    public float S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 3;
    private float v_;
    public float V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (H != other.H) return false;
      if (S != other.S) return false;
      if (V != other.V) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (H != 0F) hash ^= H.GetHashCode();
      if (S != 0F) hash ^= S.GetHashCode();
      if (V != 0F) hash ^= V.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (H != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(H);
      }
      if (S != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(S);
      }
      if (V != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(V);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (H != 0F) {
        size += 1 + 4;
      }
      if (S != 0F) {
        size += 1 + 4;
      }
      if (V != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.H != 0F) {
        H = other.H;
      }
      if (other.S != 0F) {
        S = other.S;
      }
      if (other.V != 0F) {
        V = other.V;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            H = input.ReadFloat();
            break;
          }
          case 21: {
            S = input.ReadFloat();
            break;
          }
          case 29: {
            V = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CategoryKeyword : pb::IMessage<CategoryKeyword> {
    private static readonly pb::MessageParser<CategoryKeyword> _parser = new pb::MessageParser<CategoryKeyword>(() => new CategoryKeyword());
    public static pb::MessageParser<CategoryKeyword> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Budget.Data.Data.DataReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CategoryKeyword() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CategoryKeyword(CategoryKeyword other) : this() {
      keyword_ = other.keyword_;
      suggestions_ = other.suggestions_.Clone();
    }

    public CategoryKeyword Clone() {
      return new CategoryKeyword(this);
    }

    /// <summary>Field number for the "keyword" field.</summary>
    public const int KeywordFieldNumber = 1;
    private string keyword_ = "";
    public string Keyword {
      get { return keyword_; }
      set {
        keyword_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "suggestions" field.</summary>
    public const int SuggestionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Budget.Data.Data.CategorySuggestion> _repeated_suggestions_codec
        = pb::FieldCodec.ForMessage(18, global::Budget.Data.Data.CategorySuggestion.Parser);
    private readonly pbc::RepeatedField<global::Budget.Data.Data.CategorySuggestion> suggestions_ = new pbc::RepeatedField<global::Budget.Data.Data.CategorySuggestion>();
    public pbc::RepeatedField<global::Budget.Data.Data.CategorySuggestion> Suggestions {
      get { return suggestions_; }
    }

    public override bool Equals(object other) {
      return Equals(other as CategoryKeyword);
    }

    public bool Equals(CategoryKeyword other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Keyword != other.Keyword) return false;
      if(!suggestions_.Equals(other.suggestions_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Keyword.Length != 0) hash ^= Keyword.GetHashCode();
      hash ^= suggestions_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Keyword.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Keyword);
      }
      suggestions_.WriteTo(output, _repeated_suggestions_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Keyword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Keyword);
      }
      size += suggestions_.CalculateSize(_repeated_suggestions_codec);
      return size;
    }

    public void MergeFrom(CategoryKeyword other) {
      if (other == null) {
        return;
      }
      if (other.Keyword.Length != 0) {
        Keyword = other.Keyword;
      }
      suggestions_.Add(other.suggestions_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Keyword = input.ReadString();
            break;
          }
          case 18: {
            suggestions_.AddEntriesFrom(input, _repeated_suggestions_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CategorySuggestion : pb::IMessage<CategorySuggestion> {
    private static readonly pb::MessageParser<CategorySuggestion> _parser = new pb::MessageParser<CategorySuggestion>(() => new CategorySuggestion());
    public static pb::MessageParser<CategorySuggestion> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Budget.Data.Data.DataReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CategorySuggestion() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CategorySuggestion(CategorySuggestion other) : this() {
      categoryId_ = other.categoryId_;
      popularity_ = other.popularity_;
    }

    public CategorySuggestion Clone() {
      return new CategorySuggestion(this);
    }

    /// <summary>Field number for the "categoryId" field.</summary>
    public const int CategoryIdFieldNumber = 1;
    private uint categoryId_;
    public uint CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = value;
      }
    }

    /// <summary>Field number for the "popularity" field.</summary>
    public const int PopularityFieldNumber = 2;
    private uint popularity_;
    public uint Popularity {
      get { return popularity_; }
      set {
        popularity_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CategorySuggestion);
    }

    public bool Equals(CategorySuggestion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CategoryId != other.CategoryId) return false;
      if (Popularity != other.Popularity) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (CategoryId != 0) hash ^= CategoryId.GetHashCode();
      if (Popularity != 0) hash ^= Popularity.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CategoryId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CategoryId);
      }
      if (Popularity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Popularity);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CategoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CategoryId);
      }
      if (Popularity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Popularity);
      }
      return size;
    }

    public void MergeFrom(CategorySuggestion other) {
      if (other == null) {
        return;
      }
      if (other.CategoryId != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.Popularity != 0) {
        Popularity = other.Popularity;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CategoryId = input.ReadUInt32();
            break;
          }
          case 16: {
            Popularity = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
